package org.datagic.B_medium.array;

import java.util.Arrays;

/**
 * Desc: 旋转图像
 * Author: datagic (云瞻)
 * CreateDate: 2020/8/3 11:12 上午
 * Blog: datagic.top
 * 公众号: datagator (大数据领航员)
 */
public class Medium_0048_Rotate {
    /**
     * 题目：给定一个 n × n 的二维矩阵表示一个图像。
     * 将图像顺时针旋转 90 度。
     * 说明：
     * 你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。
     * ---------------------------------------------------------------------------------------------------------
     * 示例 1:
     * 给定 matrix =
     * [
     * [1,2,3],
     * [4,5,6],
     * [7,8,9]
     * ],
     * 原地旋转输入矩阵，使其变为:
     * [
     * [7,4,1],
     * [8,5,2],
     * [9,6,3]
     * ]
     * 示例 2:
     * 给定 matrix =
     * [
     * [ 5, 1, 9,11],
     * [ 2, 4, 8,10],
     * [13, 3, 6, 7],
     * [15,14,12,16]
     * ],
     * 原地旋转输入矩阵，使其变为:
     * [
     * [15,13, 2, 5],
     * [14, 3, 4, 1],
     * [12, 6, 8, 9],
     * [16, 7,10,11]
     * ]
     * ---------------------------------------------------------------------------------------------------------
     * 题目解析：N x N 的矩阵，转置之后每一行倒序即为旋转结。
     * 另外想了一种从外圈到内圈的替换，但是代码没实现出来....有空再实现。
     * 00->30 30->33 33->03 03->00
     * 01->20 20->32 32->13 13->01
     * 02->10 10->31 31->23 23->02
     * 11->21 21->22 22->12 12->11
     * 轨迹类似玫瑰花
     * ---------------------------------------------------------------------------------------------------------
     * 时间复杂度：O(n^2)  空间复杂度：O(1)
     * ---------------------------------------------------------------------------------------------------------
     * 题目解法：N x N 的矩阵，转置之后每一行倒序即为旋转结。
     */
    public static void main(String[] args) {
        int[][] matrix = {{15, 13, 2, 5}, {14, 3, 4, 1}, {12, 6, 8, 9}, {16, 7, 10, 11}};
        rotate(matrix);
        for (int[] m : matrix) {
            System.out.println(Arrays.toString(m));
        }
    }

    public static void rotate(int[][] matrix) {
        if (matrix.length == 0) {
            return;
        }
        // 转置
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i; j < matrix.length; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }

        // 反转每行
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length / 2; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][matrix.length - j - 1];
                matrix[i][matrix.length - j - 1] = temp;
            }
        }
    }

}
