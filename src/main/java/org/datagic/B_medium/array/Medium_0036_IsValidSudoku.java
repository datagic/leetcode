package org.datagic.B_medium.array;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * Desc: 有效的数独
 * Author: datagic (云瞻)
 * CreateDate: 2020/7/31 10:06 上午
 * Blog: datagic.top
 * 公众号: datagator (大数据领航员)
 */
public class Medium_0036_IsValidSudoku {
    /**
     * 题目：判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
     * 数字 1-9 在每一行只能出现一次。
     * 数字 1-9 在每一列只能出现一次。
     * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
     * 数独部分空格内已填入了数字，空白格用 '.' 表示。
     * ---------------------------------------------------------------------------------------------------------
     * 示例 1:
     * 输入:
     * [
     * ["5","3",".",".","7",".",".",".","."],
     * ["6",".",".","1","9","5",".",".","."],
     * [".","9","8",".",".",".",".","6","."],
     * ["8",".",".",".","6",".",".",".","3"],
     * ["4",".",".","8",".","3",".",".","1"],
     * ["7",".",".",".","2",".",".",".","6"],
     * [".","6",".",".",".",".","2","8","."],
     * [".",".",".","4","1","9",".",".","5"],
     * [".",".",".",".","8",".",".","7","9"]
     * ]
     * 输出: true
     * 示例 2:
     * 输入:
     * [
     *   ["8","3",".",".","7",".",".",".","."],
     *   ["6",".",".","1","9","5",".",".","."],
     *   [".","9","8",".",".",".",".","6","."],
     *   ["8",".",".",".","6",".",".",".","3"],
     *   ["4",".",".","8",".","3",".",".","1"],
     *   ["7",".",".",".","2",".",".",".","6"],
     *   [".","6",".",".",".",".","2","8","."],
     *   [".",".",".","4","1","9",".",".","5"],
     *   [".",".",".",".","8",".",".","7","9"]
     * ]
     * 输出: false
     * ---------------------------------------------------------------------------------------------------------
     * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
     * ---------------------------------------------------------------------------------------------------------
     * 说明:
     * 一个有效的数独（部分已被填充）不一定是可解的。
     * 只需要根据以上规则，验证已经填入的数字是否有效即可。
     * 给定数独序列只包含数字 1-9 和字符 '.' 。
     * 给定数独永远是 9x9 形式的。
     * ---------------------------------------------------------------------------------------------------------
     * 题目解析：数独，检测当前数独是否正确。网上的思路很复杂，题目本身也具有复杂性，我的思路比较好理解，遍历每行、每列、每宫。遍历宫的
     * 时候，只遍历每宫的第一个格子，所以宫遍历可以存在于每行或者每列的遍历中，共使用2次for循环。
     * ---------------------------------------------------------------------------------------------------------
     * 时间复杂度：O(n)  空间复杂度：O(n)
     * ---------------------------------------------------------------------------------------------------------
     * 题目解法：
     * 两次for循环遍历。
     */
    public static void main(String[] args) {
        char[][] board = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        boolean validSudoku = isValidSudoku(board);
        System.out.println(validSudoku);
    }

    /**
     * 两次遍历，
     */
    public static boolean isValidSudoku(char[][] board) {
        // 初始化存储行、列、宫的哈希表
        Map<String, ArrayList> map = new HashMap<>();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                if (board[i][j] == '.') {
                    continue;
                }
                // 判断行
                if (map.containsKey("h_" + i) && map.get("h_" + i).contains(board[i][j])) {
                    return false;
                }
                if (map.containsKey("h_" + i)) {
                    map.get("h_" + i).add(board[i][j]);
                } else {
                    ArrayList<Character> arrayList = new ArrayList<>();
                    arrayList.add(board[i][j]);
                    map.put("h_" + i, arrayList);
                }
                // 判断列
                if (map.containsKey("l_" + j) && map.get("l_" + j).contains(board[i][j])) {
                    return false;
                }
                if (map.containsKey("l_" + j)) {
                    map.get("l_" + j).add(board[i][j]);
                } else {
                    ArrayList<Character> arrayList = new ArrayList<>();
                    arrayList.add(board[i][j]);
                    map.put("l_" + j, arrayList);
                }
                // 判断小宫
                int g = (i / 3) * 3 + j / 3;
                if (map.containsKey("g_" + g) && map.get("g_" + g).contains(board[i][j])) {
                    return false;
                }
                if (map.containsKey("g_" + g)) {
                    map.get("g_" + g).add(board[i][j]);
                } else {
                    ArrayList<Character> arrayList = new ArrayList<>();
                    arrayList.add(board[i][j]);
                    map.put("g_" + g, arrayList);
                }
            }
        }
        return true;
    }
}